/**
 * @param {number[]} nums
 * @return {number}
 */
var jump = function(nums) {
    //过程模拟：对于例子[2,3,1,1,4]我们首先在2的位置，起跳范围是0~0
    //我们遍历0~0只有一个元素，这个元素就是2，也就是说第一轮最远跳到的位置是1这个元素
    //下一轮的起跳位置就是索引1~2，我们再计算分别从这两个位置能跳的距离，取最大值
    //这里就是从3的位置跳3格到达了4，所以下一轮起跳范围就是1~4了，而4就已经是数组尾部了
    //所以我们得到跳的次数为两次
    let begin = 0//每一轮起跳点范围的开始位置
    let end = 0//每一轮起跳点范围的结束位置
    let step = 0//当前步数
    //当跳跃范围的结束位置第一次到达数组尾部，说明到达了终点，结束循环，返回step
    while(end < nums.length-1){
        //如果没有到终点，就计算当前轮次跳跃能跳到的最远位置
        let maxPos = 0
        //从开始跳跃的位置开始遍历，一直到结束跳跃的位置
        for(let i=begin;i<=end;i++){
            //分别计算在这些位置能跳到的最大距离，取最大值，就是下一轮起跳点范围的结束位置了
            maxPos = Math.max(maxPos,nums[i]+i)
        }
        //下一轮起跳点范围的开始位置，就是本轮的结束位置+1
        begin = end+1
        //下一轮起跳点范围的结束位置，就是本轮所有可能的跳跃，能到达的最远位置
        end = maxPos
        //步数+1
        step++
    }
    return step
};

jump([2,3,1,1,4])
